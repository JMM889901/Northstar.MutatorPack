global function TwinGrenades_Init
void function TwinGrenades_Init(){
    AddPrivateMatchModeSettingEnum("#MODE_SETTING_CATEGORY_RIFFPACK", "TwinGrenades", ["#SETTING_DISABLED", "#SETTING_ENABLED"], "0")
    #if SERVER
    AddCallback_OnPlayerRespawned(Respawn)
    #endif
}

bool function TwinNadesEnabled(){
    return GetCurrentPlaylistVarInt("TwinGrenades", 0) == 1
}


array<string> pilotAbility = [
    "mp_ability_cloak",
    "mp_ability_grapple",
    "mp_ability_heal",
    "mp_ability_holopilot",
    "mp_ability_shifter",
    "mp_weapon_grenade_sonar",
    "mp_weapon_deployable_cover"
]
    array<string> pilotNades = [
    "mp_weapon_satchel",
    "mp_weapon_grenade_electric_smoke",
    "mp_weapon_grenade_emp",
    "mp_weapon_grenade_gravity",
    "mp_weapon_frag_grenade",
    "mp_weapon_thermite_grenade",
    "mp_weapon_satchel",
    "mp_weapon_grenade_electric_smoke"
]
#if SERVER
void function Respawn(entity player){
    if(TwinNadesEnabled()){
        string offhand = player.GetOffhandWeapons()[OFFHAND_LEFT].GetWeaponClassName()
        if(offhand in pilotAbility){
            player.TakeWeaponNow(offhand)
            if(pilotNades[pilotAbility.find(offhand)] == player.GetOffhandWeapons()[OFFHAND_RIGHT].GetWeaponClassName())
                player.GiveOffhandWeapon(pilotNades[pilotAbility.find(offhand)+1], OFFHAND_LEFT)
            else
                player.GiveOffhandWeapon(pilotNades[pilotAbility.find(offhand)], OFFHAND_LEFT)
        }
    }
}
#endif
